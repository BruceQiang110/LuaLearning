-->>>Lua 文件I/O

--Lua I/O库用于读取和处理文件。分为简单模式(和C一样)、完全模式。
--简单模式(Simple model):拥有一个当前输入文件和一个当前输出文件，并且提供针对这些文件相关的操作。
--完全模式(Complete model):使用外部的文件句柄来实现。它以一种面向对象的形式，将所有的文件操作定义为文件句柄的方法
--简单模式在做一个简单的文件操作是较为合适，但在进行一些高级的文件操作的时候，简单模式就显得力不从心。例如同时读取多个文件这样的操作，使用完全模式较为合适。
--打开文件操作的语句如下：
--file=io.open(filename[,mode])
--mode的值有：
--r:以只读方式打开文件，该文件必须存在。
--w:打开只写文件，若文件存在则文件长度清为0，即文件内同会小时。若文件不存在则建立该文件。
--a:以附加的方式打开只写文件。若文件不存在，则会建立该文件，如果文件存在，写入的数据回被追加到文件末尾，即文件元先的内容回被保留（EOF符保留）
--r+:以可读写方式打开,该文件必须存在
--w+:打开可读可写文件，若文件存在则文件长度为零，即文件内容会消失。若文件不存在则建立该文件。
--a+:与a类似，，但此文件可读可写
--b:二进制模式,如果文件时二进制，可以加上b
--+:加号+表示对文件即可以读也可以写

--1.简单模式
--简单模式使用标准的I/O或使用一个当前输入文件和一个当前输出文件。
--以下为file.lua文件代码，操作的文件为test.lua(如果没有则会创建该文件)：代码如下：

--2.完全模式：
--通常我们需要同一时间处理多个文件。我们需要使用file:function_name来替代io.function_name方法。
--以下示例演示了如何同一事件处理多个文件：
-- file=io.open("test.lua","r");       -->以只读方式打开
-- print(file:read())          -->输出文件第一行
-- file:close();               -->关闭打开的文件
--以附件模式打开只写文件
-- file=io.open("test.lua","a")
-- file:write("--完全模式 file:write 方式追加写入内容");
-- file:close();                  -->关闭打开的文件

--注意:read()的参数与简单模式一致。
--其他方法：
--file:seek(optional whence,optional offset):设置和获取当前文件位置，成功则返回最终的文件位置(按字节)，失败则返回nil加错误信息。
--参数whence值可以是：
--"set":从头开始
--"cur":从当前位置开始(默认)
--"end":从文件尾开始
--offset:默认为0
--不带参数file:seek()则返回当前位置，file:seek("set")则定位到文件头，file:seek("end"):则定位到文件尾并返回文件大小
--file:flush():向文件写入缓冲中的所有数据
--io.lines(optional file name):打开指定的文件filename为读模式并返回一个迭代函数，每次调用将获得文件中的一行内容，当到文件末尾时，将返回nil,并自动关闭文件
--若不带参数时，io.lines()<=>io.input():lines();读取默认输入设备的内容，但结束时不关闭文件，例如：
--读取整个文件的内容，并输出每一行的内容
-- for line in io.lines("test.lua") do
--     print(line);
-- end
--以下示例使用了seek方法，定位到文件倒数第25个位置并使用read方法的*a参数，即从档期位置（倒数第25个位置）读取整个文件。
--以只读方式打开文件
-- file=io.open("test.lua","r");
-- file:seek("end",-25);
-- print(file:read("*a"));
-- file:close();






