-->>>Lua 变量

--变量在使用前，必须在代码中进行声明，即创建该变量/
--编译程序执行代码之前编译器需要知道如何给该语句变量开辟存储区，用于存储变量的值。
--lua 变量有三种类型：全局变量、局部变量、表中的域
--lua中的变量全是全局变量，哪怕是语句块或是函数里，除非用local显示声名为局部变量
--局部变量的作用域为从声明位置开始到所在的语句块结束。
--变量的默认值为nil
-- a=5;            --全局变量
-- local b=5;      --局部变量
-- function joke()
--     c=5;        --全局变量
--     local d=5;  --局部变量
-- end
-- joke();
-- print(c,d);     --输出为5，nil

-- do
--     local a=6;      --局部变量
--     b=6;            --对局部变量重新赋值
--     print(a,b);     --输出结果为：6，6
-- end
-- print(a,b);         --输出结果为：5，6

--1.赋值语句
--赋值时改变一个变量的值和改变表域的最基本的方法
--a="Hello World";
--lua 可以对多个变量同时赋值，变量列表和值列表的各个元素用逗号分开，赋值语句右边的值会依次赋值给左边的变量
-- a,b=10,20;
-- print(a,b);
--注意：遇到赋值语句，lua 会先计算右边所有的值，然后再进行赋值操作，所以我们可以这样进行交换变量的值：
-- a,b=b,a;
-- print(a,b);
--注意：在lua赋值语句中，当变量的个数和值得个数不一致时，lua 会一直以变量的个数为基础采取以下策略：
--变量个数>值的个数-->按变量个数不足nil
--变量个数<值的个数-->多余的值会被忽略
--例如：
-- a,b,c=0,1
-- print(a,b,c);           --输出结果：0,1,nil
-- a,b=a+1,b+1,b+2;        --b+2会被忽略
-- print(a,b);             --输出结果：1,2
-- a,b,c=0;
-- print(a,b,c);           --输出结果为0,nil,nil
--多值赋值经常用来交换变量，或将函数调用返回值给变量
-- a,b=f();            --f()返回两个值，第一个赋给a，第二个赋值b
--多值赋值，应该尽可能的使用局部变量，有两个好处：
--（1）避免命名冲突
--（2）访问局部变量的速度要比全局变量的速度快


--2.索引
--多table的索引使用方括号[]。lua也提供了‘.’的操作
-- tab={};
-- tab["key"]="value";
-- print(tab.key);
-- print(tab["key"]);
